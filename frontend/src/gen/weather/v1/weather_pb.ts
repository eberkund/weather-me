// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file weather/v1/weather.proto (package weather.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message weather.v1.GetWeatherRequest
 */
export class GetWeatherRequest extends Message<GetWeatherRequest> {
  /**
   * @generated from field: string city = 1;
   */
  city = "";

  constructor(data?: PartialMessage<GetWeatherRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "weather.v1.GetWeatherRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWeatherRequest {
    return new GetWeatherRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWeatherRequest {
    return new GetWeatherRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWeatherRequest {
    return new GetWeatherRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWeatherRequest | PlainMessage<GetWeatherRequest> | undefined, b: GetWeatherRequest | PlainMessage<GetWeatherRequest> | undefined): boolean {
    return proto3.util.equals(GetWeatherRequest, a, b);
  }
}

/**
 * @generated from message weather.v1.GetWeatherResponse
 */
export class GetWeatherResponse extends Message<GetWeatherResponse> {
  /**
   * @generated from field: string weather = 1;
   */
  weather = "";

  constructor(data?: PartialMessage<GetWeatherResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "weather.v1.GetWeatherResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "weather", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWeatherResponse {
    return new GetWeatherResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWeatherResponse {
    return new GetWeatherResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWeatherResponse {
    return new GetWeatherResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWeatherResponse | PlainMessage<GetWeatherResponse> | undefined, b: GetWeatherResponse | PlainMessage<GetWeatherResponse> | undefined): boolean {
    return proto3.util.equals(GetWeatherResponse, a, b);
  }
}


package openweather

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/eberkund/weather-me/pkg/providers"
	"github.com/go-faster/errors"
	_ "github.com/google/go-querystring/query"
	"net/http"
)

var _ providers.ProvidesWeather = (*OpenWeather)(nil)

type OpenWeather struct {
	secret string
	client *http.Client
}

func NewOpenWeather(secret string) *OpenWeather {
	return &OpenWeather{
		secret: secret,
		client: &http.Client{},
	}
}

type AutoGenerated struct {
	Coord struct {
		Lon float64 `json:"lon"`
		Lat float64 `json:"lat"`
	} `json:"coord"`
	Weather []struct {
		ID          int    `json:"id"`
		Main        string `json:"main"`
		Description string `json:"description"`
		Icon        string `json:"icon"`
	} `json:"weather"`
	Base string `json:"base"`
	Main struct {
		Temp      float64 `json:"temp"`
		FeelsLike float64 `json:"feels_like"`
		TempMin   float64 `json:"temp_min"`
		TempMax   float64 `json:"temp_max"`
		Pressure  int     `json:"pressure"`
		Humidity  int     `json:"humidity"`
		SeaLevel  int     `json:"sea_level"`
		GrndLevel int     `json:"grnd_level"`
	} `json:"main"`
	Visibility int `json:"visibility"`
	Wind       struct {
		Speed float64 `json:"speed"`
		Deg   int     `json:"deg"`
		Gust  float64 `json:"gust"`
	} `json:"wind"`
	Clouds struct {
		All int `json:"all"`
	} `json:"clouds"`
	Dt  int `json:"dt"`
	Sys struct {
		Sunrise int `json:"sunrise"`
		Sunset  int `json:"sunset"`
	} `json:"sys"`
	Timezone int    `json:"timezone"`
	ID       int    `json:"id"`
	Name     string `json:"name"`
	Cod      int    `json:"cod"`
}

func (o *OpenWeather) Current(ctx context.Context, lat float64, lng float64) (*providers.CurrentResponse, error) {
	url := fmt.Sprintf("https://api.openweathermap.org/data/2.5/weather?lat=%f&lon=%f&appid=%s", lat, lng, o.secret)
	request, err := http.NewRequestWithContext(ctx, http.MethodGet, url, nil)
	if err != nil {
		return nil, errors.Wrap(err, "invalid request")
	}
	do, err := o.client.Do(request)
	if err != nil {
		return nil, err
	}
	decoded := new(AutoGenerated)
	err = json.NewDecoder(do.Body).Decode(decoded)
	if err != nil {
		return nil, err
	}
	return &providers.CurrentResponse{
		Temperature: decoded.Main.Temp - 273.15,
		Humidity:    decoded.Main.Humidity,
		UVIndex:     4,
		Visibility:  decoded.Visibility / 1000,
	}, nil
}

func (o *OpenWeather) Forecast(ctx context.Context, lat float64, lng float64) (*providers.ForecastResponse, error) {
	panic("not implemented")
}

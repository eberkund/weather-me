// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package providers

import (
	"errors"
	"fmt"
)

const (
	// WeatherProviderOpenWeather is a WeatherProvider of type WeatherAPI.
	WeatherProviderOpenWeather WeatherProvider = "WeatherAPI"
)

var ErrInvalidWeatherProvider = errors.New("not a valid WeatherProvider")

// String implements the Stringer interface.
func (x WeatherProvider) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x WeatherProvider) IsValid() bool {
	_, err := ParseWeatherProvider(string(x))
	return err == nil
}

var _WeatherProviderValue = map[string]WeatherProvider{
	"WeatherAPI": WeatherProviderOpenWeather,
	"openweather": WeatherProviderOpenWeather,
}

// ParseWeatherProvider attempts to convert a string to a WeatherProvider.
func ParseWeatherProvider(name string) (WeatherProvider, error) {
	if x, ok := _WeatherProviderValue[name]; ok {
		return x, nil
	}
	return WeatherProvider(""), fmt.Errorf("%s is %w", name, ErrInvalidWeatherProvider)
}

// MarshalText implements the text marshaller method.
func (x WeatherProvider) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *WeatherProvider) UnmarshalText(text []byte) error {
	tmp, err := ParseWeatherProvider(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWeatherRequest {
    #[prost(string, tag="1")]
    pub city: ::prost::alloc::string::String,
    #[prost(enumeration="WeatherProvider", tag="2")]
    pub provider: i32,
}
impl ::prost::Name for GetWeatherRequest {
const NAME: &'static str = "GetWeatherRequest";
const PACKAGE: &'static str = "weather.v1";
fn full_name() -> ::prost::alloc::string::String { "weather.v1.GetWeatherRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/weather.v1.GetWeatherRequest".into() }}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWeatherResponse {
    #[prost(string, tag="1")]
    pub weather: ::prost::alloc::string::String,
}
impl ::prost::Name for GetWeatherResponse {
const NAME: &'static str = "GetWeatherResponse";
const PACKAGE: &'static str = "weather.v1";
fn full_name() -> ::prost::alloc::string::String { "weather.v1.GetWeatherResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/weather.v1.GetWeatherResponse".into() }}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum WeatherProvider {
    Unspecified = 0,
    OpenWeather = 1,
}
impl WeatherProvider {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            WeatherProvider::Unspecified => "WEATHER_PROVIDER_UNSPECIFIED",
            WeatherProvider::OpenWeather => "WEATHER_PROVIDER_OPEN_WEATHER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WEATHER_PROVIDER_UNSPECIFIED" => Some(Self::Unspecified),
            "WEATHER_PROVIDER_OPEN_WEATHER" => Some(Self::OpenWeather),
            _ => None,
        }
    }
}
include!("weather.v1.serde.rs");
include!("weather.v1.tonic.rs");
// @@protoc_insertion_point(module)
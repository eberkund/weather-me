// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurrentRequest {
    #[prost(float, tag="1")]
    pub latitude: f32,
    #[prost(float, tag="2")]
    pub longitude: f32,
    #[prost(enumeration="WeatherProvider", tag="3")]
    pub provider: i32,
}
impl ::prost::Name for GetCurrentRequest {
const NAME: &'static str = "GetCurrentRequest";
const PACKAGE: &'static str = "weather.v1";
fn full_name() -> ::prost::alloc::string::String { "weather.v1.GetCurrentRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/weather.v1.GetCurrentRequest".into() }}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurrentResponse {
    #[prost(float, tag="1")]
    pub temperature: f32,
    #[prost(float, tag="2")]
    pub humidity: f32,
    #[prost(float, tag="3")]
    pub uv_index: f32,
    #[prost(int32, tag="4")]
    pub visibility: i32,
    #[prost(float, tag="5")]
    pub wind_speed: f32,
}
impl ::prost::Name for GetCurrentResponse {
const NAME: &'static str = "GetCurrentResponse";
const PACKAGE: &'static str = "weather.v1";
fn full_name() -> ::prost::alloc::string::String { "weather.v1.GetCurrentResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/weather.v1.GetCurrentResponse".into() }}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetForecastRequest {
    #[prost(float, tag="1")]
    pub latitude: f32,
    #[prost(float, tag="2")]
    pub longitude: f32,
    #[prost(enumeration="WeatherProvider", tag="3")]
    pub provider: i32,
}
impl ::prost::Name for GetForecastRequest {
const NAME: &'static str = "GetForecastRequest";
const PACKAGE: &'static str = "weather.v1";
fn full_name() -> ::prost::alloc::string::String { "weather.v1.GetForecastRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/weather.v1.GetForecastRequest".into() }}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetForecastResponse {
    #[prost(float, tag="1")]
    pub temperature: f32,
}
impl ::prost::Name for GetForecastResponse {
const NAME: &'static str = "GetForecastResponse";
const PACKAGE: &'static str = "weather.v1";
fn full_name() -> ::prost::alloc::string::String { "weather.v1.GetForecastResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/weather.v1.GetForecastResponse".into() }}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum WeatherProvider {
    Unspecified = 0,
    Openweather = 1,
    Weatherapi = 2,
}
impl WeatherProvider {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            WeatherProvider::Unspecified => "WEATHER_PROVIDER_UNSPECIFIED",
            WeatherProvider::Openweather => "WEATHER_PROVIDER_OPENWEATHER",
            WeatherProvider::Weatherapi => "WEATHER_PROVIDER_WEATHERAPI",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WEATHER_PROVIDER_UNSPECIFIED" => Some(Self::Unspecified),
            "WEATHER_PROVIDER_OPENWEATHER" => Some(Self::Openweather),
            "WEATHER_PROVIDER_WEATHERAPI" => Some(Self::Weatherapi),
            _ => None,
        }
    }
}
include!("weather.v1.serde.rs");
include!("weather.v1.tonic.rs");
// @@protoc_insertion_point(module)